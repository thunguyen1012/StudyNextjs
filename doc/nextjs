Next.js

1) Why is it?
Rendering at the server side: MVC,..
+ SEO engine supports well
- It takes long time for response

Rendering at client side: React, Angular,..
+ Response extreme fast
- First paint: takes much time to download resources
- SEO engine does not work well on

Isomorphic (hybrid) web application: pre-rendering which is needed for SEO or can be eager loaded at server side, render remaining things at client side.
Nextjs goes here.

2) What is it?
Nextjs is a framework.
- Supports to pre-render at server side for React applications
- Export to a static app (html, css, javascript,..)
- CSS-in-JS
- Zero configuration
- Supports to custom: server, routing, plugin,..
- Can be used in the production

3) How is it?
3.1 Pages
A page is a react component. It is saved in the 'pages' directory.
There is a route for each page on its file name.

By default, Nextjs pre-renders every page.

Pre-rendering types:
- Static Generation: html is generated at build time.
- Server-side Rendering: html is generated on each request.

You can "choose" which rendering style to use: Static, Server-side, or Client-side rendering.

3.1.1 Static Generation
By running: ```next build```

- Only static content: just generate html.
~/.next/server/static/<build id>/pages/index.html

- Need data for page
-> page file must export an async getStaticProps() function. This function will pull the data and return an object that has a ```props``` property.

- Need dynamic urls
-> page must have getStaticProps() function
-> page file must export an async getStaticPaths() function. This function will return an object that has a ```paths``` property.

dynamic route + static page: no need getStaticProps, getStaticPaths
dynamic route + dynamic page: need both getStaticProps, getStaticPaths

Usage: whenever possible
- Marketing pages
- Blog posts
- E-commerce product listings
- Help and documentation

3.1.2 Server-side Rendering
page file must export an async getServerSideProps() function. This function is invoked by the server for each request.

SSG: static side generation.

getStaticProps() function makes json file this is props while generation. This json data is passed to page component as props.
in dev, getStaticProps() function will be called on every request.

getStaticPaths() function returns object that includes 'fallback' property.
fallback: false -> 404 when page of requesting route wasn't generated.
fallback: true -> new page will be generated when page of requesting route wasn't generated.

getServerSideProps() function has a parameter: context
context {
    params,
    req,
    res,
    query,
    preview,
    previewData
}

useSWR() hook function fetches data at client side. https://swr.now.sh/

3.2 Custom default pages
_app.js: inject global things: global style sheet, i18n,..
_error.js: custom error page

4. Routing